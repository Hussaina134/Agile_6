# -*- coding: utf-8 -*-
"""Diabetes_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/101dJ0PgARm2MF_4Jg3sdt7S7xOL7KRu9
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB

# Load the data
df = pd.read_csv("diabetes.csv")

# Split the data into features and target
x=df.drop('diabetes',axis=1)
y=df['diabetes']
# Split the data into training and test sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

# Create a Gaussian Naive Bayes model
model = GaussianNB()

# Train the model
model.fit(x_train, y_train)

# Get user input for blood glucose levels and blood pressure
glucose = float(input('Enter your blood glucose level: '))
pressure = float(input('Enter your blood pressure: '))

# Create a new data point with the user's input
new_data = pd.DataFrame([[glucose, pressure]], columns=['glucose', 'bloodpressure'])

# Make a prediction for the new data point
prediction = model.predict(new_data)

if prediction[0] == 0:
    print('Negative for diabetes')
else:
    print('Positive for diabetes')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

# Load the data
data = pd.read_csv("diabetes.csv")

# Split the data into features and target
X = data.drop('diabetes', axis=1)
y = data['diabetes']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Create a Decision Tree model
model = DecisionTreeClassifier()

# Train the model
model.fit(X_train, y_train)

# Get user input for blood glucose levels and blood pressure
glucose = float(input('Enter your blood glucose level: '))
pressure = float(input('Enter your blood pressure: '))

# Create a new data point with the user's input
new_data = pd.DataFrame([[glucose, pressure]], columns=['glucose', 'bloodpressure'])

# Make a prediction for the new data point
prediction = model.predict(new_data)

if prediction[0] == 0:
    print('Negative for diabetes')
else:
    print('Positive for diabetes')